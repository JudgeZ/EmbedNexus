name: Regenerate Fixture Corpus

on:
  workflow_dispatch:
    inputs:
      skip_artifact_upload:
        description: 'Skip artifact upload step to limit storage usage.'
        required: false
        default: 'false'
      dry_run:
        description: 'Set to true to only validate tooling availability without running generation commands.'
        required: false
        default: 'false'

permissions:
  contents: read

jobs:
  fixtures-windows:
    name: Generate Windows security captures
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate DPAPI recovery fixtures
        if: inputs.dry_run != 'true'
        shell: pwsh
        run: |
          & (Resolve-Path './scripts/collect_dpapi.ps1') -OutputDir 'tests/fixtures/security/dpapi-recovery' `
            -AuditLogPath 'tests/golden/security/dpapi-recovery-audit.jsonl' `
            -EmitChecksums

      - name: Generate TLS fixture captures
        if: inputs.dry_run != 'true'
        shell: bash
        run: |
          set -euo pipefail
          ./scripts/trace_capture.sh --profile encryption-latency --output tests/fixtures/security/encryption-latency.json
          ./scripts/trace_capture.sh --profile tls-config-matrix --output tests/fixtures/security/tls-config-matrix.yaml
          ./scripts/trace_capture.sh --profile perf-window --output-dir tests/fixtures/security/perf-window

      - name: Upload Windows fixture captures
        if: inputs.dry_run != 'true' && inputs.skip_artifact_upload != 'true'
        uses: actions/upload-artifact@v5
        with:
          name: windows-security-fixtures
          if-no-files-found: warn
          retention-days: 14
          path: |
            tests/fixtures/security/dpapi-recovery/**
            tests/golden/security/dpapi-recovery-audit.jsonl
            tests/golden/security/dpapi-recovery-audit.jsonl.sha256
            tests/fixtures/security/encryption-latency.json
            tests/fixtures/security/tls-config-matrix.yaml
            tests/fixtures/security/perf-window/**

  fixtures-linux:
    name: Generate Linux-accessible fixtures
    runs-on: ubuntu-latest
    needs: fixtures-windows
    env:
      PYTHONUNBUFFERED: '1'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download Windows security captures
        if: inputs.dry_run != 'true'
        uses: actions/download-artifact@v6
        with:
          name: windows-security-fixtures
          path: .

      - name: Set up Python 3.11
        uses: actions/setup-python@v6
        with:
          python-version: '3.11'

      - name: Install Python dependencies
        if: inputs.dry_run != 'true'
        run: |
          python -m pip install --upgrade pip
          python -m pip install watchdog pyyaml typer rich click cryptography networkx

      - name: Install system dependencies
        if: inputs.dry_run != 'true'
        run: |
          sudo apt-get update
          sudo DEBIAN_FRONTEND=noninteractive apt-get install -y \
            openssl \
            tshark \
            jq \
            shellcheck \
            shfmt \
            zstd

      - name: Set up Rust toolchain
        if: inputs.dry_run != 'true'
        uses: dtolnay/rust-toolchain@stable
        with:
          components: cargo

      - name: Generate filesystem event fixtures
        if: inputs.dry_run != 'true'
        run: |
          set -euo pipefail
          python scripts/record_fs_events.py --config tests/fixtures/filesystem/mock-events.yaml \
            --replay-dir tests/fixtures/filesystem/workspace-replay/
          python scripts/verify_event_order.py tests/fixtures/filesystem/workspace-replay/

      - name: Generate archive scenarios
        if: inputs.dry_run != 'true'
        run: |
          set -euo pipefail
          cargo run --bin archive_builder -- --scenario quota --output tests/fixtures/archives/quota-scenarios.toml
          cargo run --bin archive_builder -- --scenario overflow --output tests/fixtures/archives/overflow-case.tar.zst
          cargo run --bin archive_builder -- --scenario quota-latency --output tests/fixtures/archives/quota-latency.toml
          cargo run --bin archive_builder -- --scenario overflow-latency --output tests/fixtures/archives/overflow-latency.tar.zst
          cargo run --bin archive_builder -- --scenario bulk --output-dir tests/fixtures/archives/bulk-sample/
          cargo run --bin archive_builder -- --scenario fuzz | python scripts/sanitize_jsonl.py > tests/golden/archives/fuzzed-manifests.jsonl

      - name: Generate encryption toggle fixtures
        if: inputs.dry_run != 'true'
        run: |
          set -euo pipefail
          if grep -q 'Placeholder' scripts/generate_encryption_toggles.py; then
            echo 'generate_encryption_toggles.py is a placeholder – skipping encryption toggle generation.'
          else
            python scripts/generate_encryption_toggles.py --output tests/fixtures/security/encryption-toggles.json
          fi

      - name: Capture TLS and DPAPI traces
        if: inputs.dry_run != 'true'
        run: |
          set -euo pipefail
          TRACE_OUT=tests/golden/security/tls-handshake.trace scripts/trace_capture.sh --profile tls-handshake
          scripts/trace_capture.sh --profile tls-fuzz --output tests/golden/security/tls-fuzz.log
          scripts/trace_capture.sh --profile encryption-latency --output tests/fixtures/security/encryption-latency.json
          scripts/trace_capture.sh --profile tls-config-matrix --output tests/fixtures/security/tls-config-matrix.yaml
          scripts/trace_capture.sh --profile perf-window --output-dir tests/fixtures/security/perf-window/
          scripts/trace_capture.sh --profile tls-negotiation --output tests/golden/security/tls-negotiation.trace
          scripts/trace_capture.sh --profile perf-baseline --output tests/golden/security/tls-performance.jsonl
          scripts/trace_capture.sh --profile dpapi-audit --output tests/golden/security/dpapi-recovery-audit.jsonl

      - name: Generate offline transport fixtures
        if: inputs.dry_run != 'true'
        run: |
          set -euo pipefail
          if grep -q 'Placeholder' scripts/offline_transport_buffer.py; then
            echo 'offline_transport_buffer.py is a placeholder – skipping offline transport generation.'
          else
            python scripts/offline_transport_buffer.py capture --output-dir tests/fixtures/transport/offline-queue/ --profile air-gapped
            python scripts/offline_transport_buffer.py verify tests/fixtures/transport/offline-queue/ --max-buffer 512
            python scripts/offline_transport_buffer.py replay --input tests/fixtures/transport/offline-queue/burst-drain.jsonl --transcript tests/golden/transport/offline-buffer-replay.transcript
          fi

      - name: Run manifest replay harness
        if: inputs.dry_run != 'true'
        run: |
          set -euo pipefail
          if grep -q 'Placeholder' scripts/manifest_replay_harness.rs; then
            echo 'manifest_replay_harness.rs is a placeholder – skipping ingestion manifest replay.'
          else
            cargo run --bin manifest_replay_harness -- --input-dir tests/fixtures/ingestion/delayed-ledger/ --golden-out tests/golden/ingestion/manifest-replay.log --delay-ms 45000
          fi

      - name: Generate routing fixtures
        if: inputs.dry_run != 'true'
        run: |
          set -euo pipefail
          python scripts/routing_matrix.py matrix --output tests/fixtures/routing/multi-repo-matrix.json
          python scripts/routing_matrix.py latency --output tests/fixtures/routing/latency-matrix.json
          python scripts/routing_matrix.py fanout --output-dir tests/fixtures/routing/high-fanout/ --metrics-output tests/fixtures/routing/fanout-metrics.json

      - name: Update shared fixture bundles
        if: inputs.dry_run != 'true'
        run: |
          set -euo pipefail
          python scripts/fixture_packager.py build --output tests/fixtures/shared/
          python scripts/fixture_packager.py validate tests/fixtures/shared/

      - name: Verify fixture checksums
        if: inputs.dry_run != 'true'
        run: |
          set -euo pipefail
          bash scripts/checksums.sh --verify tests/fixtures/ tests/fixtures/security/ tests/golden/ tests/golden/security/

      - name: Upload fixture artifacts
        if: inputs.dry_run != 'true' && inputs.skip_artifact_upload != 'true'
        uses: actions/upload-artifact@v5
        with:
          name: fixture-regeneration-output
          if-no-files-found: warn
          retention-days: 14
          path: |
            tests/fixtures/**
            tests/fixtures/security/encryption-latency.json
            tests/fixtures/security/tls-config-matrix.yaml
            tests/golden/archives/fuzzed-manifests.jsonl
            tests/golden/transport/offline-buffer-replay.transcript
            tests/golden/ingestion/manifest-replay.log
