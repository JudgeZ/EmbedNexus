=== .github/workflows/ci-matrix.yml ===
name: CI Matrix (Rust)

on:
  pull_request:
  workflow_dispatch:

jobs:
  rust:
    name: Rust ${{ matrix.rust }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust: ["1.82.0", "stable"]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Rust ${{ matrix.rust }}
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          components: clippy, rustfmt

      - name: Install Linux system deps
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential pkg-config libssl-dev libzstd-dev

      - name: cargo fmt (check)
        run: cargo fmt --all -- --check

      - name: cargo clippy (deny warnings)
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: cargo test (workspace, ubuntu only)
        if: runner.os == 'Linux'
        run: cargo test --workspace --all-features

=== .github/workflows/ci.yml ===
name: Continuous Integration

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential pkg-config libssl-dev libzstd-dev

      - name: Set up Rust toolchain 1.82.0
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: 1.82.0
          components: clippy, rustfmt

      - name: Cargo fmt
        run: cargo fmt --all -- --check

      - name: Cargo clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Cargo test
        run: cargo test

=== .github/workflows/codeql.yml ===
name: CodeQL (Rust)

on:
  pull_request:
  workflow_dispatch:
  schedule:
    - cron: '0 8 * * 1'

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: rust

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3


=== .github/workflows/regenerate-fixtures.yml ===
name: Regenerate Fixture Corpus

on:
  workflow_dispatch:
    inputs:
      skip_artifact_upload:
        description: 'Skip artifact upload step to limit storage usage.'
        required: false
        default: 'false'
      dry_run:
        description: 'Set to true to only validate tooling availability without running generation commands.'
        required: false
        default: 'false'

jobs:
  fixtures-windows:
    name: Generate Windows security captures
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate DPAPI recovery fixtures
        if: inputs.dry_run != 'true'
        shell: pwsh
        run: |
          & (Resolve-Path './scripts/collect_dpapi.ps1') -OutputDir 'tests/fixtures/security/dpapi-recovery' `
            -AuditLogPath 'tests/golden/security/dpapi-recovery-audit.jsonl' `
            -EmitChecksums

      - name: Generate TLS fixture captures
        if: inputs.dry_run != 'true'
        shell: bash
        run: |
          set -euo pipefail
          ./scripts/trace_capture.sh --profile encryption-latency --output tests/fixtures/security/encryption-latency.json
          ./scripts/trace_capture.sh --profile tls-config-matrix --output tests/fixtures/security/tls-config-matrix.yaml
          ./scripts/trace_capture.sh --profile perf-window --output-dir tests/fixtures/security/perf-window

      - name: Upload Windows fixture captures
        if: inputs.dry_run != 'true' && inputs.skip_artifact_upload != 'true'
        uses: actions/upload-artifact@v4
        with:
          name: windows-security-fixtures
          if-no-files-found: warn
          retention-days: 14
          path: |
            tests/fixtures/security/dpapi-recovery/**
            tests/golden/security/dpapi-recovery-audit.jsonl
            tests/golden/security/dpapi-recovery-audit.jsonl.sha256
            tests/fixtures/security/encryption-latency.json
            tests/fixtures/security/tls-config-matrix.yaml
            tests/fixtures/security/perf-window/**

  fixtures-linux:
    name: Generate Linux-accessible fixtures
    runs-on: ubuntu-latest
    needs: fixtures-windows
    env:
      PYTHONUNBUFFERED: '1'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download Windows security captures
        if: inputs.dry_run != 'true'
        uses: actions/download-artifact@v4
        with:
          name: windows-security-fixtures
          path: .

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Python dependencies
        if: inputs.dry_run != 'true'
        run: |
          python -m pip install --upgrade pip
          python -m pip install watchdog pyyaml typer rich click cryptography networkx

      - name: Install system dependencies
        if: inputs.dry_run != 'true'
        run: |
          sudo apt-get update
          sudo DEBIAN_FRONTEND=noninteractive apt-get install -y \
            openssl \
            tshark \
            jq \
            shellcheck \
            shfmt \
            zstd

      - name: Set up Rust toolchain
        if: inputs.dry_run != 'true'
        uses: dtolnay/rust-toolchain@stable
        with:
          components: cargo

      - name: Generate filesystem event fixtures
        if: inputs.dry_run != 'true'
        run: |
          set -euo pipefail
          python scripts/record_fs_events.py --config tests/fixtures/filesystem/mock-events.yaml \
            --replay-dir tests/fixtures/filesystem/workspace-replay/
          python scripts/verify_event_order.py tests/fixtures/filesystem/workspace-replay/

      - name: Generate archive scenarios
        if: inputs.dry_run != 'true'
        run: |
          set -euo pipefail
          cargo run --bin archive_builder -- --scenario quota --output tests/fixtures/archives/quota-scenarios.toml
          cargo run --bin archive_builder -- --scenario overflow --output tests/fixtures/archives/overflow-case.tar.zst
          cargo run --bin archive_builder -- --scenario quota-latency --output tests/fixtures/archives/quota-latency.toml
          cargo run --bin archive_builder -- --scenario overflow-latency --output tests/fixtures/archives/overflow-latency.tar.zst

=== .github/workflows/regenerate-goldens.yml ===
name: Regenerate Golden Artifacts

on:
  workflow_dispatch:
    inputs:
      skip_artifact_upload:
        description: 'Skip artifact upload step to limit storage usage.'
        required: false
        default: 'false'
      dry_run:
        description: 'Set to true to only validate tooling availability without running generation commands.'
        required: false
        default: 'false'

jobs:
  goldens-windows:
    name: Generate Windows security goldens
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate DPAPI audit export
        if: inputs.dry_run != 'true'
        shell: pwsh
        run: |
          & (Resolve-Path './scripts/collect_dpapi.ps1') -OutputDir 'tests/fixtures/security/dpapi-recovery' `
            -AuditLogPath 'tests/golden/security/dpapi-recovery-audit.jsonl' `
            -EmitChecksums

      - name: Generate TLS negotiation goldens
        if: inputs.dry_run != 'true'
        shell: bash
        run: |
          set -euo pipefail
          TRACE_OUT=tests/golden/security/tls-handshake.trace ./scripts/trace_capture.sh --profile tls-handshake
          ./scripts/trace_capture.sh --profile tls-fuzz --output tests/golden/security/tls-fuzz.log
          TRACE_OUT=tests/golden/security/encryption-toggle.trace ./scripts/trace_capture.sh --profile encryption-toggle
          TRACE_OUT=tests/golden/security/tls-negotiation.trace ./scripts/trace_capture.sh --profile tls-negotiation
          ./scripts/trace_capture.sh --profile perf-baseline --output tests/golden/security/tls-performance.jsonl
          ./scripts/trace_capture.sh --profile dpapi-audit --output tests/golden/security/dpapi-recovery-audit.jsonl

      - name: Capture WSL bridge trace
        if: inputs.dry_run != 'true'
        shell: pwsh
        run: |
          & (Resolve-Path './scripts/wsl_transport_proxy.ps1') -OutputPath 'tests/golden/transport/wsl-handshake-negotiation.trace' `
            -BridgeMetadataPath 'tests/golden/security/wsl-bridge.json' `
            -ProxyHost '127.0.0.1' -ProxyPort 5173 -EmitChecksums

      - name: Refresh TLS checksum manifests
        if: inputs.dry_run != 'true'
        shell: pwsh
        run: |
          $targets = @(
            'tests/golden/security/tls-handshake.trace',
            'tests/golden/security/tls-fuzz.log',
            'tests/golden/security/encryption-toggle.trace',
            'tests/golden/security/tls-negotiation.trace',
            'tests/golden/security/tls-performance.jsonl'
          )
          foreach ($path in $targets) {
            $hash = (Get-FileHash -LiteralPath $path -Algorithm SHA256).Hash.ToLowerInvariant()
            $leaf = Split-Path -Leaf $path
            $checksumPath = "$path.sha256"
            Set-Content -LiteralPath $checksumPath -Value "$hash  $leaf" -Encoding UTF8
          }

      - name: Upload Windows security goldens
        if: inputs.dry_run != 'true' && inputs.skip_artifact_upload != 'true'
        uses: actions/upload-artifact@v4
        with:
          name: windows-security-goldens
          if-no-files-found: warn
          retention-days: 14
          path: |
            tests/golden/security/tls-handshake.trace
            tests/golden/security/tls-handshake.trace.sha256
            tests/golden/security/tls-fuzz.log
            tests/golden/security/tls-fuzz.log.sha256
            tests/golden/security/encryption-toggle.trace
            tests/golden/security/encryption-toggle.trace.sha256
            tests/golden/security/tls-negotiation.trace
            tests/golden/security/tls-negotiation.trace.sha256
            tests/golden/security/tls-performance.jsonl
            tests/golden/security/tls-performance.jsonl.sha256
            tests/golden/security/dpapi-recovery-audit.jsonl
            tests/golden/security/dpapi-recovery-audit.jsonl.sha256
            tests/golden/security/wsl-bridge.json
            tests/golden/security/wsl-bridge.json.sha256
            tests/golden/transport/wsl-handshake-negotiation.trace
            tests/golden/transport/wsl-handshake-negotiation.trace.sha256

  goldens-linux:
    name: Generate Linux-accessible goldens
    runs-on: ubuntu-latest
    needs: goldens-windows
    env:
      PYTHONUNBUFFERED: '1'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download Windows security goldens
        if: inputs.dry_run != 'true'
        uses: actions/download-artifact@v4
        with:
          name: windows-security-goldens
          path: .

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Python dependencies

=== .github/workflows/security.yml ===
name: Security Scans

on:
  pull_request:
  schedule:
    - cron: '0 6 * * *'
  workflow_dispatch:

permissions:
  contents: read

jobs:
  cargo-audit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - name: Install cargo-audit
        run: cargo install cargo-audit --locked
      - name: Run cargo audit
        run: cargo audit --deny warnings

  cargo-deny:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - name: Install cargo-deny
        run: cargo +stable install cargo-deny --locked
      - name: Run cargo-deny (all checks)
        run: |
          cargo +stable deny check advisories
          cargo +stable deny check bans
          cargo +stable deny check sources
          cargo +stable deny check licenses

  gitleaks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Gitleaks scan
        uses: gitleaks/gitleaks-action@v2
        env:
          GITLEAKS_LICENSE: community
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: detect --source . --no-git --redact --config .gitleaks.toml

  sbom:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - name: Install CycloneDX plugin
        run: cargo install cargo-cyclonedx --locked
      - name: Generate CycloneDX SBOM
        run: cargo +stable cyclonedx --workspace --all-features --output sbom.xml
      - name: Upload SBOM artifact
        uses: actions/upload-artifact@v4
        with:
          name: cyclonedx-sbom
          path: sbom.xml
          if-no-files-found: error

